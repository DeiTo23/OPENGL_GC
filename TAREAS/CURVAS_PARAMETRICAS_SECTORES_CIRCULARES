#ifdef __APPLE__
#include <GLUT/glut.h>
#else
#include <GL/glut.h>
#endif
#include <stdlib.h>
#include <windows.h>
#include <cmath>
#define pi 3.1416
float green[] = {0.258, 0.721, 0.18}, orange[] = {0.925, 0.419, 0.192}, magenta[] = {0.901, 0.09, 0.301};
float yellow[] = {0.976, 0.854, 0.011}, pink[] = {0.8, 0.36, 0.592}, cyan[] = {0.031, 0.69, 0.831};
float purple[] = {0.549, 0.270, 0.568}, black[] = {0, 0, 0}, red[]={1,0,0}, blue[] ={0,0,1};

void escala() {
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    int a = 10;
    gluOrtho2D(-a, a, -a, a);
}

void semi(float modo, int x, double y) {
    glBegin(modo);
    glVertex2d(0,0);
    for (double Theta = pi / x; Theta < 3 * pi / y; Theta += 0.1) {
        glVertex2d(3 * cos(Theta), 3 * sin(Theta));
    }
    glEnd();
}
void semi2(float modo, int x, double y) {
    glBegin(modo);
    glVertex2d(0,0);
    for (float Theta=-pi/x ; Theta<pi/y ; Theta = Theta+0.1) {
        glVertex2d(3 * cos(Theta), 3 * sin(Theta));
    }
    glEnd();
}
void semi3(float modo, int x, double y) {
    glBegin(modo);
    glVertex2d(0,0);
    for (float Theta=pi/x ; Theta<y*pi ; Theta = Theta+0.1)
    {
        glVertex2d(3 * cos(Theta), 3 * sin(Theta));
    }
    glEnd();
}
void display(GLenum modo, int x, double y) {
    glClearColor(1, 1, 1, 1);
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    semi(modo, x, y);
    glutSwapBuffers();
}
void display2(GLenum modo, int x, double y) {
    glClearColor(1, 1, 1, 1);
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    semi2(modo, x, y);
    glutSwapBuffers();
}
void display3(GLenum modo, int x, double y) {
    glClearColor(1, 1, 1, 1);
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    semi3(modo, x, y);
    glutSwapBuffers();
}

void d1() {
    display(GL_LINE_LOOP, 1, 2);
}
void d2() {
    display(GL_POLYGON, 1, 2);
}

void d3() {
    display2(GL_LINE_LOOP, 2, 2);
}
void d4() {
    display2(GL_POLYGON, 2, 2);
}
void d5() {
    display3(GL_LINE_LOOP, 2, 2);
}
void d6() {
    display3(GL_POLYGON, 2, 2);
}
void ventana(int a, int l, void (*obs)(), float *color) {
    glutInitWindowPosition(a, l);
    glutInitWindowSize(400, 400);
    glutInitDisplayMode(GLUT_RGB | GLUT_DOUBLE | GLUT_DEPTH);
    glutCreateWindow("Sector Circular");
    glColor3f(color[0], color[1], color[2]);
    glutDisplayFunc(obs);
    escala();
}

int main(int argc, char *argv[]) {
    glutInit(&argc, argv);
    ventana(0, 0, d3, red);
    ventana(400, 0, d5, orange);
    ventana(800, 0, d1, blue);
    ventana(0, 400, d4, pink);
    ventana(400, 400, d6, yellow);
    ventana(800, 400, d2, cyan);
    glutMainLoop();
    return EXIT_SUCCESS;
}
