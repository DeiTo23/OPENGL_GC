#include <windows.h>
#ifdef APPLE
#include <GLUT/glut.h>
#else
#include <GL/glut.h>
#endif
#define M_PI 3.14159
#include <stdlib.h>
#include <cmath>
float blue[]={0.03,0.18,0.82}, green[]={0.05,0.46,0.22}, orange[]={0.98,0.5,0.28}, cyan[]={0,1,1},red[]={1,0,0};
float yellow[]={1,1,0}, purple[]={0.5,0.1,0.98}, white[]={1,1,1}, black[]={0,0,0},brown[]={0.5,0.35,0.05};
float A[]={0,0},B[]={0,1.5};
void inicio()
{
    glMatrixMode(GL_PROJECTION);
    float a=5;
    gluOrtho2D(-a,a,-a,a);
    glClearColor(1,1,1,1);
}
void Circunferencia(float *XY, float R, int M, float T, float *rgb){
    glColor3fv(rgb);
    switch (M) {
        case 2: {
            glPolygonMode(GL_FRONT_AND_BACK, GL_POINT);
            glPointSize(T); break;
        }
        case 3: {
            glPolygonMode(GL_FRONT_AND_BACK, GL_LINE);
            glLineWidth(T); break;
        }
        default: {
            glPolygonMode(GL_FRONT_AND_BACK, GL_FILL);
            }
        }
    glBegin(GL_POLYGON);
    for (float i = 0; i <= 2*M_PI ; i = i + 0.01){
    glVertex2f(R*cos(i) + XY[0], R*sin(i) + XY[1]);
    }
    glEnd();
    glBegin(GL_LINE_LOOP);
    glColor3fv(black);
    for (float i = 0; i <= 2*M_PI ; i = i + 0.01){
    glVertex2f(R*cos(i) + XY[0], R*sin(i) + XY[1]);
    }
    glEnd();

}
void dibujo()
{
    Circunferencia(A,1.5,3,2,black);
    for (int i = 0; i < 6; i++)
    {
        glPushMatrix();
        glRotatef(60 * i, 0, 0, 1);
        Circunferencia(B,1.5,3,2,black);
        glPopMatrix();
    }
}

void display (void)
{
    glClear(GL_COLOR_BUFFER_BIT);
    glColor3d(1,0,0);
    dibujo();
    glutSwapBuffers();
}
int main(int argc, char *argv[])
{
    glutInit(&argc, argv); //Inicializa la ventana
    glutInitWindowPosition(700,0); //Posicion de la ventana
    glutInitWindowSize(800,800); //TamaÃ±o de la ventana
    glutInitDisplayMode(GLUT_RGB|GLUT_DOUBLE|GLUT_DEPTH);//Especifica el tipo de modo de visualizacion al crear una ventana(Activa el buffer de colores de tipo RGB
    glutCreateWindow("Mandala Triangulos"); //Nombre que se le da a la ventana
    glutDisplayFunc(display);
    inicio();
    glutMainLoop(); //Hace que aparezca la ventana
    return EXIT_SUCCESS; //Se puede colocar tambien return 0
}
