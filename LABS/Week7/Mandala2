#include <windows.h>
#ifdef APPLE
#include <GLUT/glut.h>
#else
#include <GL/glut.h>
#endif
#define M_PI 3.14159
#include <stdlib.h>
#include <cmath>
   float blue[]={0,0,1}, green[]={0,0.5,0}, orange[]={0.9,0.6,0.1}, cyan[]={0,1,1},red[]={1,0,0};
   float yellow[]={1,1,0}, purple[]={1,0,1}, white[]={1,1,1}, black[]={0,0,0},brown[]={0.5,0.35,0.05};
   float C[]={0,2},D[]={0,4},E[]={3.45,-2},F[]={-3.45,-2 },G[]={0,-4},H[]={3.45,2},I[]={-3.45,2};
void inicio()
{
    glMatrixMode(GL_PROJECTION);
    float a=6;
    gluOrtho2D(-a,a,-a,a);
    glClearColor(1,1,1,1);
}
void Circunferencia(float *XY, float R, int M, float T){

    switch (M) {
        case 2: {
            glPolygonMode(GL_FRONT_AND_BACK, GL_POINT);
            glPointSize(T); break;
        }
        case 3: {
            glPolygonMode(GL_FRONT_AND_BACK, GL_LINE);
            glLineWidth(T); break;
        }
        default: {
            glPolygonMode(GL_FRONT_AND_BACK, GL_FILL);
            }
        }
    glBegin(GL_POLYGON);
    for (float i = 0; i <= 2*M_PI ; i = i + 0.01){
    glVertex2f(R*cos(i) + XY[0], R*sin(i) + XY[1]);
    }
    glEnd();
}
void triangulo(float *XY, float *XY1, float *XY2,float T){
    glLineWidth(T);
    glBegin(GL_LINE_LOOP);
    glVertex2fv(XY);
    glVertex2fv(XY1);
    glVertex2fv(XY2);
    glEnd();
}
void dibujo(const float *rgb) {
    glColor3fv(rgb);
    triangulo(D,E,F,2);
    triangulo(G,H,I,2);

    for(int i=0;i<6;i++){
    glPushMatrix();
    glRotatef(60*i,0,0,1);
    for (float i = 0; i <2; i += 0.5) {
        Circunferencia(C, 0.5+i, 3, 2);
    }
    glPopMatrix();
    }

}

void display() {
    glClear(GL_COLOR_BUFFER_BIT);
    glColor3d(1, 0, 0);
    dibujo(green);
    glutSwapBuffers();
}

int main(int argc, char *argv[]) {
    glutInit(&argc, argv); // Inicializa la ventana
    glutInitWindowPosition(700, 0); // Posición de la ventana
    glutInitWindowSize(800, 800); // Tamaño de la ventana
    glutInitDisplayMode(GLUT_RGB | GLUT_DOUBLE | GLUT_DEPTH); // Especifica el tipo de modo de visualización al crear una ventana

    glutCreateWindow("Mandala2"); // Nombre que se le da a la ventana
    glutDisplayFunc(display);
    inicio();

    glutMainLoop(); // Hace que aparezca la ventana
    return EXIT_SUCCESS; // Se puede colocar también return 0
}
