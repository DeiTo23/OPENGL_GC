#include <windows.h>
#ifdef APPLE
#include <GLUT/glut.h>
#else
#include <GL/glut.h>
#endif
#define M_PI 3.14159
#include <stdlib.h>
#include <cmath>
   float blue[]={0,0,1}, green[]={0,0.5,0}, orange[]={0.9,0.6,0.1}, cyan[]={0,1,1},red[]={1,0,0};
   float yellow[]={1,1,0}, purple[]={1,0,1}, white[]={1,1,1}, black[]={0,0,0},brown[]={0.5,0.35,0.05};
   float C[]={0,0};
void inicio()
{
    glMatrixMode(GL_PROJECTION);
    float a=2;
    gluOrtho2D(-a,a,-a,a);
    glClearColor(1,1,1,1);
}
void Circunferencia(float *XY, float R, int M, float T){

    switch (M) {
        case 2: {
            glPolygonMode(GL_FRONT_AND_BACK, GL_POINT);
            glPointSize(T); break;
        }
        case 3: {
            glPolygonMode(GL_FRONT_AND_BACK, GL_LINE);
            glLineWidth(T); break;
        }
        default: {
            glPolygonMode(GL_FRONT_AND_BACK, GL_FILL);
            }
        }
    glBegin(GL_POLYGON);
    for (float i = 0; i <= 2*M_PI ; i = i + 0.01){
    glVertex2f(R*cos(i) + XY[0], R*sin(i) + XY[1]);
    }
    glEnd();
}
void dibujo(float *rgb){
    glColor3fv(rgb);
    Circunferencia(C,1,3,4);
    for(int i=0;i<4;i++){
        float F[]={-0.75+i*0.5,0};//horizontal
        Circunferencia(F,0.25,3,4);
        float G[]={0,0.75-i*0.5};//vertical
        Circunferencia(G, 0.25, 3, 4);
    }
    for(int i=0;i<2;i++){
    float H[]={-0.5+i*1,0};//H
    float I[]={0,0.5-i*1};//V
    Circunferencia(H, 0.5, 3, 4);
    Circunferencia(I,0.5,3,4);
    }

}

void display (void)
{
    glClear(GL_COLOR_BUFFER_BIT);
    glColor3d(1,0,0);
    dibujo(blue);
    glutSwapBuffers();
}

int main(int argc, char *argv[])
{
    glutInit(&argc, argv);
    glutInitWindowSize(800,800);
    glutInitWindowPosition(570,20);
    glutInitDisplayMode(GLUT_RGB | GLUT_DOUBLE | GLUT_DEPTH);
    glutCreateWindow("mandala");
    inicio();
    glutDisplayFunc(display);
    glutMainLoop();
    return EXIT_SUCCESS;
}
